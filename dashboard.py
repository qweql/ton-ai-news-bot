# dashboard.py
import streamlit as st
import pandas as pd
import plotly.express as px
import psycopg2
from config import SUPABASE_URL, SUPABASE_KEY
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="TON AI Analytics Dashboard",
    page_icon="üìä",
    layout="wide"
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
@st.cache_resource
def init_connection():
    return psycopg2.connect(
        host=SUPABASE_URL.replace("https://", "").split('.')[0],
        database="postgres",
        user="postgres",
        password=SUPABASE_KEY,
        port=5432
    )

conn = init_connection()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üìä TON AI Analytics Dashboard")
st.markdown("–†–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã TON")

# –ú–µ—Ç—Ä–∏–∫–∏
col1, col2, col3, col4 = st.columns(4)

with col1:
    price = pd.read_sql("SELECT price_usd FROM price_history ORDER BY created_at DESC LIMIT 1", conn)
    st.metric("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", f"${price.iloc[0,0]:.2f}")

with col2:
    change = pd.read_sql("SELECT change_24h FROM price_history ORDER BY created_at DESC LIMIT 1", conn)
    st.metric("–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á", f"{change.iloc[0,0]:.2f}%")

with col3:
    sentiment = pd.read_sql("SELECT sentiment FROM posted_news ORDER BY created_at DESC LIMIT 1", conn)
    st.metric("–¢–æ–Ω –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ–≤–æ—Å—Ç–∏", sentiment.iloc[0,0] if not sentiment.empty else "N/A")

with col4:
    accuracy = pd.read_sql("""
        SELECT AVG(CAST(is_correct AS INT)) * 100 as accuracy 
        FROM prediction_accuracy 
        WHERE is_correct IS NOT NULL
    """, conn)
    st.metric("–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤", f"{accuracy.iloc[0,0]:.1f}%" if not accuracy.empty else "N/A")

# –ì—Ä–∞—Ñ–∏–∫–∏
tab1, tab2, tab3 = st.tabs(["–¶–µ–Ω–∞ TON", "–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π", "NFT –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])

with tab1:
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã TON")
    price_data = pd.read_sql("""
        SELECT created_at, price_usd, change_24h 
        FROM price_history 
        WHERE created_at > NOW() - INTERVAL '7 days'
        ORDER BY created_at
    """, conn)
    
    fig = px.line(price_data, x='created_at', y='price_usd', 
                 title='–¶–µ–Ω–∞ TON –∑–∞ 7 –¥–Ω–µ–π')
    st.plotly_chart(fig, use_container_width=True)

with tab2:
    st.subheader("–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
    news_data = pd.read_sql("""
        SELECT created_at, sentiment, confidence 
        FROM posted_news 
        WHERE created_at > NOW() - INTERVAL '7 days'
        ORDER BY created_at
    """, conn)
    
    if not news_data.empty:
        fig = px.scatter(news_data, x='created_at', y='confidence', 
                        color='sentiment', size='confidence',
                        title='–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–µ–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏')
        st.plotly_chart(fig, use_container_width=True)

with tab3:
    st.subheader("–¢–æ–ø NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ NFT –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    st.info("NFT –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤")

# –ü—Ä–æ–≥–Ω–æ–∑—ã
st.subheader("ü§ñ AI –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 6 —á–∞—Å–æ–≤")
try:
    from ml_predictor import TONPredictor
    predictor = TONPredictor()
    features = predictor.get_current_features()
    
    if features:
        prediction, confidence = predictor.predict_future_price(features)
        st.metric("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ", f"{prediction:.2f}%", 
                 delta_color="inverse" if prediction < 0 else "normal")
        st.progress(float(confidence), text=f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {confidence:.0%}")
    else:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞")
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

# –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
st.subheader("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
recent_news = pd.read_sql("""
    SELECT title, sentiment, confidence, created_at 
    FROM posted_news 
    ORDER BY created_at DESC 
    LIMIT 10
""", conn)

for _, row in recent_news.iterrows():
    with st.expander(f"{row['title'][:50]}... ({row['sentiment']})"):
        st.write(f"–¢–æ–Ω: {row['sentiment']}")
        st.write(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {row['confidence']:.2f}")
        st.write(f"–í—Ä–µ–º—è: {row['created_at']}")
